apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-aws-eks
  labels:
    crossplane.io/xrd: compositeclusters.demo.anthos.com
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: demo.anthos.com/v1
    kind:  CompositeCluster
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  resources:
  - name: ekscluster
    base:
      apiVersion:  eks.aws.gke.cloud.google.com/v1beta1
      kind: Cluster
      metadata:
        name: eks-cluster
        labels:
          role: controlplane
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          version: 1.24
          roleArnSelector:
            matchControllerRef: true
          vpcConfig:
          - subnetIdSelector:
              matchControllerRef: true
            endpointPrivateAccesss: false
            endpointPublicAccess: true
    patches:
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
      toFieldPath: status.odicIssuerUrl
    - fromFieldPath: spec.parameters.k8sVersion
      toFieldPath: spec.forProvider.version
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: status.clusterName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.region
      toFieldPath: status.region
  #   readinessChecks:
  #   - type: MatchString
  #     fieldPath: status.atProvider.status
  #     matchString: ACTIVE

  - name: clusterauth
    base:
      apiVersion: eks.aws.gke.cloud.google.com/v1beta1
      kind: ClusterAuth
      metadata:
        name: clusterauth
        labels:
          role: controlplane
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
        writeConnectionSecretToRef:
          name: kubeconfig
          namespace: default
    patches:
    - fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-ekscluster"
    - fromFieldPath: status.region
      toFieldPath: spec.forProvider.region
  - name: eksnodegroup
    base:
      apiVersion: eks.aws.gke.cloud.google.com/v1beta1
      kind: NodeGroup
      metadata:
        name: eks-ng
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
          #instanceTypes: t3.medium
          nodeRoleArnSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
          region: us-east-1
          scalingConfig:
          - desiredSize: 1
            maxSize: 6
            minSize: 1
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
    patches:
    - fromFieldPath: spec.parameters.nodeSize
      toFieldPath: spec.forProvider.instanceTypes[0]
      transforms:
      - type: map
        map:
          small: t3.small
          medium: t3.medium
          large: t3.large
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig[0].minSize
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.nodePoolStatus
    # readinessChecks:
    # - type: MatchString
    #   fieldPath: status.atProvider.status
    #   matchString: ACTIVE
  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: Role
      metadata:
        labels:
          role: controlplane
        name: controlplane
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
          path: /

  - name: iamattachment-controlplane
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: RolePolicyAttachment
      metadata:
        name: cluster-policy1
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleSelector:
            matchControllerRef: true
            matchLabels:
              role: controlplane
  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: Role
      metadata:
        labels:
          role: nodegroup
        name: nodegroup
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
          path: /
  - name: iamattachment-worker
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: RolePolicyAttachment
      metadata:
        name: node-policy1
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: iamattachment-cni
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: RolePolicyAttachment
      metadata:
        name: node-policy2
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: iamattachment-registry
    base:
      apiVersion: iam.aws.gke.cloud.google.com/v1beta1
      kind: RolePolicyAttachment
      metadata:
        name: node-policy2
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: vpc-eks
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: VPC
      metadata:
        name: sample-vpc
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          cidrBlock: 10.0.0.0/16
          tags:
            Name: sample-vpc
    patches:
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: status.vpcId
  - name: subnet-nodepool-1a
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: Subnet
      metadata:
        name: subnet-nodepool-1a
        labels:
          zone: us-east-1a
          access: public
          role: nodegroup
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          availabilityZone: us-east-1a
          cidrBlock: 10.0.0.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIpOnLaunch: true
          tags:
            Name: subnet-nodepool-1a
  - name: subnet-nodepool-1b
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: Subnet
      metadata:
        name: subnet-nodepool-1b
        labels:
          zone: us-east-1b
          access: public
          role: nodegroup
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          availabilityZone: us-east-1b
          cidrBlock: 10.0.1.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIpOnLaunch: true
          tags:
            Name: subnet-nodepool-1b
  - name: subnet-nodepool-1c
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: Subnet
      metadata:
        name: subnet-nodepool-1c
        labels:
          zone: us-east-1c
          access: public
          role: nodegroup
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          availabilityZone: us-east-1c
          cidrBlock: 10.0.2.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIpOnLaunch: true
          tags:
            Name: subnet-nodepool-1c
  - name: inet-gateway
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: InternetGateway
      metadata:
        name: routegw
        labels:
          name: routegw
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          region: us-east-1
          vpcIdSelector:
            matchControllerRef: true
          tags:
            Name: eks-cluster
  - name: route-to-ig
    base:
      apiVersion: ec2.aws.gke.cloud.google.com/v1beta1
      kind: DefaultRouteTable
      metadata:
        name: routetoIG
        labels:
          name: defaultRouteTable
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          defaultRouteTableIdSelector:
            matchControllerRef: true
          region: us-east-1
          route:
          - cidrBlock: 0.0.0.0/0
            gatewayIdSelector:
              matchControllerRef: true
  - name: clusterbootstrap
    base:
      apiVersion: containerattached.gcp.gke.cloud.google.com/v1beta1
      kind: ClusterBootstrapJob
      metadata:
        name: installmanifest
        labels:
          name: attachedclusterbootstrap
      spec:
        clusterConfig:
          project: ""
          id: ""
          location: us-west1
          platformVersion: ""
        clusterCredentials:
          source: Secret
          secretRef:
            namespace: default
            key: kubeconfig
    patches:
    - fromFieldPath: spec.parameters.k8sVersion
      toFieldPath: spec.clusterConfig.platformVersion
      transforms:
      - type: map
        map:
          1.24: 1.24.0-gke.1
          1.25: 1.25.0-gke.2
    - fromFieldPath: status.clusterName
      toFieldPath: spec.clusterConfig.id
    - fromFieldPath: spec.parameters.fleetProject
      toFieldPath: spec.clusterConfig.project
    - fromFieldPath: metadata.uid
      toFieldPath: spec.clusterCredentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-ekscluster"
    readinessChecks:
    - type: NonEmpty
      fieldPath: status.succeeded
  - name: attachedCluster
    base:
      apiVersion: containerattached.gcp.gke.cloud.google.com/v1beta1
      kind: Cluster
      metadata:
        name: attachedcluster
      spec:
        forProvider:
          distribution: eks
          location: us-west1
          fleet:
          - project: "project/<project-number>"
    patches:
    - fromFieldPath: spec.parameters.k8sVersion
      toFieldPath: spec.forProvider.platformVersion
      transforms:
      - type: map
        map:
          1.24: 1.24.0-gke.1
          1.25: 1.25.0-gke.2
    - fromFieldPath: status.odicIssuerUrl
      toFieldPath: spec.forProvider.oidcConfig[0].issuerUrl
    - fromFieldPath: spec.parameters.fleetProject
      toFieldPath: spec.forProvider.fleet[0].project
      transforms:
      - type: string
        string:
          fmt: "projects/%s"
    - fromFieldPath: spec.parameters.adminUsers
      toFieldPath: spec.forProvider.authorization[0].adminUsers
    - fromFieldPath: status.clusterName
      toFieldPath: metadata.annotations[crossplane.io/external-name]